#!/usr/bin/env bash

# Pre-commit hook for nixpkgs repository
# Runs linting checks on changed files only

set -e

echo "Running pre-commit checks on changed files..."

# Check if we're in the right directory
if [[ ! -f "justfile" ]]; then
    echo "Error: Not in nixpkgs repository root"
    exit 1
fi

# Get list of changed .nix files
changed_nix_files=$(git diff --cached --name-only --diff-filter=ACM | rg '\.nix$' || true)

if [[ -z "$changed_nix_files" ]]; then
    echo "✅ No .nix files changed - skipping checks"
    exit 0
fi

echo "Found $(echo "$changed_nix_files" | wc -l) changed .nix files"

# Variables to track job status
formatter_pid=""
linter_pid=""
formatter_status=0
linter_status=0

# Run formatter on changed files only
{
    echo "Running Nix formatter on changed files..."
    if nix run .#formatter.$(nix eval --impure --expr builtins.currentSystem) -- $changed_nix_files; then
        echo "✅ Formatting completed"
    else
        echo "❌ Formatting failed. Please fix the issues before committing."
        echo "Run 'nix fmt' to format your code."
        exit 1
    fi
} &
formatter_pid=$!

# Run linter on changed files only
{
    echo "Running statix on changed files..."
    # Run statix on each file individually
    failed=0
    for file in $changed_nix_files; do
        if ! statix check "$file"; then
            failed=1
        fi
    done
    
    if [[ $failed -eq 0 ]]; then
        echo "✅ Linting completed"
    else
        echo "❌ Linting failed. Please fix the warnings before committing."
        echo "Run 'statix check <file>' on the affected files."
        exit 1
    fi
} &
linter_pid=$!

# Wait for both jobs to complete
wait $formatter_pid
formatter_status=$?

wait $linter_pid
linter_status=$?

# Check if any job failed
if [[ $formatter_status -ne 0 || $linter_status -ne 0 ]]; then
    echo "❌ Pre-commit checks failed!"
    exit 1
fi

echo "✅ Pre-commit checks passed!"
exit 0